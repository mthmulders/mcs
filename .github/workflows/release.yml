# Inspired by & copied from JReleaser sample:
# https://github.com/aalmiray/q-cli/blob/main/.github/workflows/release.yml

name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"
        required: true
      next:
        description: "Next version"
        required: false

jobs:
  version:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3.3.0
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set release version
        id: version
        run: |
          RELEASE_VERSION=${{ github.event.inputs.version }}
          NEXT_VERSION=${{ github.event.inputs.next }}
          PLAIN_VERSION=`echo ${RELEASE_VERSION} | awk 'match($0, /^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)/) { print substr($0, RSTART, RLENGTH); }'`
          COMPUTED_NEXT_VERSION="${PLAIN_VERSION}-SNAPSHOT"
          if [ -z $NEXT_VERSION ]
          then
            NEXT_VERSION=$COMPUTED_NEXT_VERSION
          fi
          mvn -B versions:set versions:commit -DnewVersion=$RELEASE_VERSION
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Action"
          git commit -a -m "chore: Releasing version $RELEASE_VERSION"
          git push origin HEAD:main
          git rev-parse HEAD > HEAD
          echo $RELEASE_VERSION > RELEASE_VERSION
          echo $PLAIN_VERSION > PLAIN_VERSION
          echo $NEXT_VERSION > NEXT_VERSION

      - name: Upload version files
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            HEAD
            *_VERSION

  # Build native executable per runner
  build:
    needs: [ version ]
    name: build-${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
        gu-binary: [ gu, gu.cmd ]
        exclude:
          - os: ubuntu-latest
            gu-binary: gu.cmd
          - os: macos-latest
            gu-binary: gu.cmd
          - os: windows-latest
            gu-binary: gu
    runs-on: ${{ matrix.os }}

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v3

      - name: Read HEAD ref
        id: head
        uses: juliangruber/read-file-action@v1.1.4
        with:
          path: artifacts/HEAD

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.head.outputs.content }}

      # This action supports Windows; it does nothing on Linux and macOS.
      - name: Add Developer Command Prompt for Microsoft Visual C++
        uses: ilammy/msvc-dev-cmd@v1.10.0

      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: 22.0.0.2
          java-version: 17
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Native Image
        run: mvn -B -Pnative package

      - name: Create distribution
        run: mvn -B -Pdist package -DskipTests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            target/distributions/*.zip
            target/distributions/*.tar.gz

  # Collect all executables and release
  release:
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
      # must read HEAD before checkout
      - name: Download all build artifacts
        uses: actions/download-artifact@v3

      - name: Read HEAD ref
        id: head
        uses: juliangruber/read-file-action@v1
        with:
          path: artifacts/HEAD

      - name: Read versions
        id: version
        run: |
          RELEASE_VERSION=`cat artifacts/RELEASE_VERSION`
          PLAIN_VERSION=`cat artifacts/PLAIN_VERSION`
          NEXT_VERSION=`cat artifacts/NEXT_VERSION`
          echo "RELEASE_VERSION = $RELEASE_VERSION"
          echo "PLAIN_VERSION   = $PLAIN_VERSION"
          echo "NEXT_VERSION    = $NEXT_VERSION"
          echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION"
          echo "::set-output name=PLAIN_VERSION::$PLAIN_VERSION"
          echo "::set-output name=NEXT_VERSION::$NEXT_VERSION"

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.head.outputs.content }}
          fetch-depth: 0

      # checkout will clobber downloaded artifacts; we have to download them again
      - name: Download all build artifacts
        uses: actions/download-artifact@v3

      - name: Set up Java
        uses: actions/setup-java@v3.3.0
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Release with JReleaser
        run: mvn -B -Prelease -DartifactsDir=artifacts jreleaser:full-release
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_HOMEBREW_GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          JRELEASER_SNAP_GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          JRELEASER_CHOCOLATEY_GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          JRELEASER_SDKMAN_CONSUMER_KEY: ${{ secrets.JRELEASER_SDKMAN_CONSUMER_KEY }}
          JRELEASER_SDKMAN_CONSUMER_TOKEN: ${{ secrets.JRELEASER_SDKMAN_CONSUMER_TOKEN }}

      - name: Set next version
        env:
          NEXT_VERSION: ${{ steps.version.outputs.NEXT_VERSION }}
        run: |
          mvn -B versions:set versions:commit -DnewVersion=$NEXT_VERSION
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Action"
          git commit -a -m "chore: Prepare next version: $NEXT_VERSION"
          git push origin HEAD:main
