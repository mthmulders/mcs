package it.mulders.mcs.search.vulnerability;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.util.Base64;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.github.packageurl.MalformedPackageURLException;
import com.github.packageurl.PackageURL;
import it.mulders.mcs.common.McsRuntimeException;
import it.mulders.mcs.common.Result;
import it.mulders.mcs.search.SearchResponse;

public class ComponentReportClient {
  private static final String MISSING_OSS_INDEX_CREDENTIALS_WARNING = """
      You've requested to show reported security vulnerabilities, but you haven't configured a username and password
      for the Sonatype OSS Index. See https://ossindex.sonatype.org for details on how this may impact your usage.""";

  private final String hostname;
  private final HttpClient client = HttpClient.newHttpClient();

  public ComponentReportClient() {
    this("https://ossindex.sonatype.org");
  }

  // Visible for testing
  ComponentReportClient(final String hostname) {
    this.hostname = hostname;
  }

  public Result<ComponentReportResponse> search(final SearchResponse.Response.Doc[] docs) {
    return search(Stream.of(docs).map(this::toPackageUrls).toList());
  }

  public Result<ComponentReportResponse> search(final List<String> coordinates) {
    var purls = coordinates.stream().map(purl -> "\"" + purl + "\"").collect(Collectors.joining(","));
    var json = "{\"coordinates\" : [%s]}".formatted(purls);

    var builder = HttpRequest.newBuilder()
    .version(HttpClient.Version.HTTP_1_1)
    .POST(HttpRequest.BodyPublishers.ofString(json))
    .header("Content-Type", "application/json");

    var username = System.getProperty("ossindex.username", "");
    var password = System.getProperty("ossindex.password", "");

    if (!username.isEmpty() || !password.isEmpty()) {
      builder.uri(URI.create(String.format("%s/api/v3/authorized/component-report", hostname)));
      builder.header("Authorization", getBasicAuthenticationHeader(username, password));
    } else {
      builder.uri(URI.create(String.format("%s/api/v3/component-report", hostname)));
      System.out.println(MISSING_OSS_INDEX_CREDENTIALS_WARNING);
    }

    try {
      return client.send(builder.build(), new ComponentReportResponseBodyHandler()).body();
    } catch (IOException | InterruptedException e) {
      return new Result.Failure<>(e);
    }
  }

  private String getBasicAuthenticationHeader(final String username, final String password) {
    String valueToEncode = username + ":" + password;
    return "Basic " + Base64.getEncoder().encodeToString(valueToEncode.getBytes());
  }

  public String toPackageUrls(final SearchResponse.Response.Doc doc) {
    try {
      return new PackageURL("maven", doc.g(), doc.a(), doc.v() != null ? doc.v() : doc.latestVersion(), null, null).canonicalize();
    } catch (MalformedPackageURLException e) {
      throw new McsRuntimeException(e);
    }
  }

  public void assignComponentReport(final ComponentReportResponse.ComponentReport componentReport,
                                    final SearchResponse.Response.Doc[] docs) {
    for (int i = 0; i < docs.length; i++) {
      try {
        PackageURL packageURL = new PackageURL(componentReport.coordinates());
        SearchResponse.Response.Doc doc = docs[i];
        if (matches(packageURL, doc)) {
          doc = doc.withComponentReport(componentReport);
          docs[i] = doc;
          break;
        }
      } catch (MalformedPackageURLException e) {
        throw new McsRuntimeException(e);
      }
    }
  }

  private boolean matches(final PackageURL packageURL, final SearchResponse.Response.Doc doc) {
    return Objects.equals(packageURL.getNamespace(), doc.g()) &&
        Objects.equals(packageURL.getName(), doc.a()) &&
        Objects.equals(packageURL.getVersion(), doc.v() != null ? doc.v() : doc.latestVersion());
  }
}
