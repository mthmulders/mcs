package it.mulders.mcs.search.vulnerability;

import java.io.IOException;
import java.io.InputStream;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodySubscriber;
import java.net.http.HttpResponse.ResponseInfo;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.jr.ob.JSON;
import com.fasterxml.jackson.jr.ob.JSONObjectException;
import it.mulders.mcs.common.Result;
import it.mulders.mcs.search.vulnerability.ComponentReportResponse.ComponentReport;

public class ComponentReportResponseBodyHandler implements HttpResponse.BodyHandler<Result<ComponentReportResponse>> {
  @Override
  public BodySubscriber<Result<ComponentReportResponse>> apply(final ResponseInfo responseInfo) {
    return asObject();
  }

  static HttpResponse.BodySubscriber<Result<ComponentReportResponse>> asObject() {
    var upstream = HttpResponse.BodySubscribers.ofInputStream();

    return HttpResponse.BodySubscribers.mapping(
        upstream,
        ComponentReportResponseBodyHandler::toComponentReportResponse
    );
  }

  static Result<ComponentReportResponse> toComponentReportResponse(final InputStream inputStream) {
    try (final InputStream input = inputStream) {
      var list = JSON.std.listFrom(input);
      return new Result.Success<>(constructComponentReportResponse(list));
    } catch (final JsonParseException | JSONObjectException joe) {
      return new Result.Failure<>(
          new IllegalStateException(
              """
              
              Error parsing vulnerabilities for supplied component.  This may be a temporary failure from ossindex.sonatype.org.
              If the problem persists, please open a conversation at
              
                  https://github.com/mthmulders/mcs/discussions
              
              Make sure to at least provide your invocation of mcs and the version of mcs you're using.
              """
          )
      );
    } catch (final IOException ioe) {
      return new Result.Failure<>(
          new IllegalStateException("Error processing response: %s%n".formatted(ioe.getLocalizedMessage()))
      );
    }
  }

  static ComponentReportResponse constructComponentReportResponse(final List<Object> input) {
    return new ComponentReportResponse(input.stream()
        .map(ComponentReportResponseBodyHandler::constructComponentReport)
        .toArray(ComponentReportResponse.ComponentReport[]::new));
  }

  private static ComponentReportResponse.ComponentReport constructComponentReport(final Object input) {
    Map<String, Object> map = (Map<String, Object>) input;

    return new ComponentReport(
        (String) map.get("coordinates"),
        (String) map.get("reference"),
        constructComponentReportVulnerabilities((List<Map<String, Object>>) map.get("vulnerabilities"))
    );
  }

  private static ComponentReportResponse.ComponentReport.ComponentReportVulnerability[] constructComponentReportVulnerabilities(
      List<Map<String, Object>> input) {
    return input.stream()
        .map(ComponentReportResponseBodyHandler::constructComponentReportVulnerability)
        .toArray(ComponentReportResponse.ComponentReport.ComponentReportVulnerability[]::new);
  }

  private static ComponentReportResponse.ComponentReport.ComponentReportVulnerability constructComponentReportVulnerability(
      final Map<String, Object> input) {
    return new ComponentReportResponse.ComponentReport.ComponentReportVulnerability(
        (String) input.get("id"),
        (String) input.get("title"),
        (Double) input.get("cvssScore"),
        (String) input.get("reference")
    );
  }
}
