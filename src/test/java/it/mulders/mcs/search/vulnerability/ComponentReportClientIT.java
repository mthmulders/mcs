package it.mulders.mcs.search.vulnerability;

import static com.github.tomakehurst.wiremock.client.WireMock.badRequest;
import static com.github.tomakehurst.wiremock.client.WireMock.ok;
import static com.github.tomakehurst.wiremock.client.WireMock.post;
import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;
import static com.github.tomakehurst.wiremock.client.WireMock.urlPathMatching;
import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;

import com.github.tomakehurst.wiremock.core.Options;
import com.github.tomakehurst.wiremock.junit5.WireMockExtension;
import it.mulders.mcs.common.Result;
import java.io.IOException;
import java.io.InputStream;
import java.net.ConnectException;
import java.net.http.HttpClient;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import org.assertj.core.api.WithAssertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.DisplayNameGeneration;
import org.junit.jupiter.api.DisplayNameGenerator;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.RegisterExtension;
import org.junitpioneer.jupiter.SetSystemProperty;
import org.junitpioneer.jupiter.SetSystemProperty.SetSystemProperties;

@DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderscores.class)
class ComponentReportClientIT implements WithAssertions {
    private final HttpClient httpClient = HttpClient.newHttpClient();

    @RegisterExtension
    static WireMockExtension wiremock = WireMockExtension.newInstance()
            .options(wireMockConfig()
                    .bindAddress("localhost")
                    .dynamicPort()
                    .useChunkedTransferEncoding(Options.ChunkedEncodingPolicy.NEVER))
            .configureStaticDsl(true)
            .build();

    String getResourceAsString(final String resourceName) {
        try (final InputStream input = getClass().getResourceAsStream(resourceName)) {
            byte[] bytes = input != null ? input.readAllBytes() : new byte[] {};
            return new String(bytes, StandardCharsets.UTF_8);

        } catch (final IOException ioe) {
            return fail("Can't load resource %s", resourceName, ioe);
        }
    }

    @Nested
    @DisplayName("ComponentReport with vulnerabilities")
    class ComponentReportWithVulnerabilitiesTest {
        @Test
        @SetSystemProperties({
            @SetSystemProperty(key = "ossindex.username", value = "user"),
            @SetSystemProperty(key = "ossindex.password", value = "pass")
        })
        void should_parse_response() {
            // Arrange
            var wmRuntimeInfo = wiremock.getRuntimeInfo();
            stubFor(post(urlPathMatching("/api/v3/authorized/component-report"))
                    .withBasicAuth("user", "pass")
                    .willReturn(ok(getResourceAsString("/vulnerabilities-component-report-response.json"))));

            // Act
            var result = new ComponentReportClient(httpClient, wmRuntimeInfo.getHttpBaseUrl())
                    .search(List.of("pkg:maven/org.apache.shiro/shiro-web@1.9.0"));

            // Assert
            assertThat(result.value()).isNotNull();
            assertThat(result.value().componentReports()).hasSize(1);
            assertThat(result.value().componentReports()[0].vulnerabilities()).hasSize(2);

            var ids = Arrays.stream(result.value().componentReports()[0].vulnerabilities())
                    .map(ComponentReportResponse.ComponentReport.ComponentReportVulnerability::id)
                    .toArray(String[]::new);
            assertThat(ids).containsOnly("CVE-2022-40664", "CVE-2023-34478");
        }
    }

    @Nested
    @DisplayName("ComponentReport with no vulnerabilities")
    class ComponentReportWithNoVulnerabilitiesTest {
        @Test
        void should_parse_response() {
            // Arrange
            var wmRuntimeInfo = wiremock.getRuntimeInfo();
            stubFor(post(urlPathMatching("/api/v3/component-report"))
                    .willReturn(ok(getResourceAsString("/no-vulnerabilities-component-report-response.json"))));

            // Act
            var result = new ComponentReportClient(httpClient, wmRuntimeInfo.getHttpBaseUrl())
                    .search(List.of("pkg:maven/org.codehaus.plexus/plexus-utils@3.4.1"));

            // Assert
            assertThat(result.value()).isNotNull();
            assertThat(result.value().componentReports()).hasSize(1);
            assertThat(result.value().componentReports()[0].vulnerabilities()).isEmpty();
        }
    }

    @DisplayName("Error handling")
    @Nested
    class ErrorHandlingTest {
        @Test
        void should_gracefully_handle_4xx_response() {
            // Arrange
            var wmRuntimeInfo = wiremock.getRuntimeInfo();
            stubFor(post(urlPathMatching("/api/v3/component-report"))
                    .willReturn(badRequest().withBody("Ossindex returned 400, msg: ")));

            // Act
            var result = new ComponentReportClient(httpClient, wmRuntimeInfo.getHttpBaseUrl())
                    .search(List.of("pkg:maven/org.codehaus.plexus/plexus-utils@3.4.1"));

            // Assert
            assertThat(result).isInstanceOf(Result.Failure.class);
            assertThat(result.cause()).isInstanceOf(IllegalStateException.class);
            assertThat(result.cause()).hasMessageContaining("https://github.com/mthmulders/mcs/discussions");
        }

        @Test
        void should_gracefully_handle_connection_failure() {
            // Very unlikely there's an HTTP server running there...
            var result = new ComponentReportClient(httpClient, "http://localhost:21")
                    .search(List.of("pkg:maven/org.codehaus.plexus/plexus-utils@3.4.1"));

            assertThat(result).isInstanceOf(Result.Failure.class);
            assertThat(result.cause()).isInstanceOf(ConnectException.class);
        }
    }
}
